// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/03/2022 16:41:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    booth_alu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module booth_alu_vlg_sample_tst(
	multiplier,
	mutiplicant,
	sampler_tx
);
input [31:0] multiplier;
input [31:0] mutiplicant;
output sampler_tx;

reg sample;
time current_time;
always @(multiplier or mutiplicant)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module booth_alu_vlg_check_tst (
	result,
	sampler_rx
);
input [63:0] result;
input sampler_rx;

reg [63:0] result_expected;

reg [63:0] result_prev;

reg [63:0] result_expected_prev;

reg [63:0] last_result_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	result_prev = result;
end

// update expected /o prevs

always @(trigger)
begin
	result_expected_prev = result_expected;
end


// expected result[ 63 ]
initial
begin
	result_expected[63] = 1'bX;
end 
// expected result[ 62 ]
initial
begin
	result_expected[62] = 1'bX;
end 
// expected result[ 61 ]
initial
begin
	result_expected[61] = 1'bX;
end 
// expected result[ 60 ]
initial
begin
	result_expected[60] = 1'bX;
end 
// expected result[ 59 ]
initial
begin
	result_expected[59] = 1'bX;
end 
// expected result[ 58 ]
initial
begin
	result_expected[58] = 1'bX;
end 
// expected result[ 57 ]
initial
begin
	result_expected[57] = 1'bX;
end 
// expected result[ 56 ]
initial
begin
	result_expected[56] = 1'bX;
end 
// expected result[ 55 ]
initial
begin
	result_expected[55] = 1'bX;
end 
// expected result[ 54 ]
initial
begin
	result_expected[54] = 1'bX;
end 
// expected result[ 53 ]
initial
begin
	result_expected[53] = 1'bX;
end 
// expected result[ 52 ]
initial
begin
	result_expected[52] = 1'bX;
end 
// expected result[ 51 ]
initial
begin
	result_expected[51] = 1'bX;
end 
// expected result[ 50 ]
initial
begin
	result_expected[50] = 1'bX;
end 
// expected result[ 49 ]
initial
begin
	result_expected[49] = 1'bX;
end 
// expected result[ 48 ]
initial
begin
	result_expected[48] = 1'bX;
end 
// expected result[ 47 ]
initial
begin
	result_expected[47] = 1'bX;
end 
// expected result[ 46 ]
initial
begin
	result_expected[46] = 1'bX;
end 
// expected result[ 45 ]
initial
begin
	result_expected[45] = 1'bX;
end 
// expected result[ 44 ]
initial
begin
	result_expected[44] = 1'bX;
end 
// expected result[ 43 ]
initial
begin
	result_expected[43] = 1'bX;
end 
// expected result[ 42 ]
initial
begin
	result_expected[42] = 1'bX;
end 
// expected result[ 41 ]
initial
begin
	result_expected[41] = 1'bX;
end 
// expected result[ 40 ]
initial
begin
	result_expected[40] = 1'bX;
end 
// expected result[ 39 ]
initial
begin
	result_expected[39] = 1'bX;
end 
// expected result[ 38 ]
initial
begin
	result_expected[38] = 1'bX;
end 
// expected result[ 37 ]
initial
begin
	result_expected[37] = 1'bX;
end 
// expected result[ 36 ]
initial
begin
	result_expected[36] = 1'bX;
end 
// expected result[ 35 ]
initial
begin
	result_expected[35] = 1'bX;
end 
// expected result[ 34 ]
initial
begin
	result_expected[34] = 1'bX;
end 
// expected result[ 33 ]
initial
begin
	result_expected[33] = 1'bX;
end 
// expected result[ 32 ]
initial
begin
	result_expected[32] = 1'bX;
end 
// expected result[ 31 ]
initial
begin
	result_expected[31] = 1'bX;
end 
// expected result[ 30 ]
initial
begin
	result_expected[30] = 1'bX;
end 
// expected result[ 29 ]
initial
begin
	result_expected[29] = 1'bX;
end 
// expected result[ 28 ]
initial
begin
	result_expected[28] = 1'bX;
end 
// expected result[ 27 ]
initial
begin
	result_expected[27] = 1'bX;
end 
// expected result[ 26 ]
initial
begin
	result_expected[26] = 1'bX;
end 
// expected result[ 25 ]
initial
begin
	result_expected[25] = 1'bX;
end 
// expected result[ 24 ]
initial
begin
	result_expected[24] = 1'bX;
end 
// expected result[ 23 ]
initial
begin
	result_expected[23] = 1'bX;
end 
// expected result[ 22 ]
initial
begin
	result_expected[22] = 1'bX;
end 
// expected result[ 21 ]
initial
begin
	result_expected[21] = 1'bX;
end 
// expected result[ 20 ]
initial
begin
	result_expected[20] = 1'bX;
end 
// expected result[ 19 ]
initial
begin
	result_expected[19] = 1'bX;
end 
// expected result[ 18 ]
initial
begin
	result_expected[18] = 1'bX;
end 
// expected result[ 17 ]
initial
begin
	result_expected[17] = 1'bX;
end 
// expected result[ 16 ]
initial
begin
	result_expected[16] = 1'bX;
end 
// expected result[ 15 ]
initial
begin
	result_expected[15] = 1'bX;
end 
// expected result[ 14 ]
initial
begin
	result_expected[14] = 1'bX;
end 
// expected result[ 13 ]
initial
begin
	result_expected[13] = 1'bX;
end 
// expected result[ 12 ]
initial
begin
	result_expected[12] = 1'bX;
end 
// expected result[ 11 ]
initial
begin
	result_expected[11] = 1'bX;
end 
// expected result[ 10 ]
initial
begin
	result_expected[10] = 1'bX;
end 
// expected result[ 9 ]
initial
begin
	result_expected[9] = 1'bX;
end 
// expected result[ 8 ]
initial
begin
	result_expected[8] = 1'bX;
end 
// expected result[ 7 ]
initial
begin
	result_expected[7] = 1'bX;
end 
// expected result[ 6 ]
initial
begin
	result_expected[6] = 1'bX;
end 
// expected result[ 5 ]
initial
begin
	result_expected[5] = 1'bX;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 
// generate trigger
always @(result_expected or result)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected result = %b | ",result_expected_prev);
	$display("| real result = %b | ",result_prev);
`endif
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end
	if (
		( result_expected_prev[8] !== 1'bx ) && ( result_prev[8] !== result_expected_prev[8] )
		&& ((result_expected_prev[8] !== last_result_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[8] = result_expected_prev[8];
	end
	if (
		( result_expected_prev[9] !== 1'bx ) && ( result_prev[9] !== result_expected_prev[9] )
		&& ((result_expected_prev[9] !== last_result_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[9] = result_expected_prev[9];
	end
	if (
		( result_expected_prev[10] !== 1'bx ) && ( result_prev[10] !== result_expected_prev[10] )
		&& ((result_expected_prev[10] !== last_result_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[10] = result_expected_prev[10];
	end
	if (
		( result_expected_prev[11] !== 1'bx ) && ( result_prev[11] !== result_expected_prev[11] )
		&& ((result_expected_prev[11] !== last_result_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[11] = result_expected_prev[11];
	end
	if (
		( result_expected_prev[12] !== 1'bx ) && ( result_prev[12] !== result_expected_prev[12] )
		&& ((result_expected_prev[12] !== last_result_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[12] = result_expected_prev[12];
	end
	if (
		( result_expected_prev[13] !== 1'bx ) && ( result_prev[13] !== result_expected_prev[13] )
		&& ((result_expected_prev[13] !== last_result_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[13] = result_expected_prev[13];
	end
	if (
		( result_expected_prev[14] !== 1'bx ) && ( result_prev[14] !== result_expected_prev[14] )
		&& ((result_expected_prev[14] !== last_result_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[14] = result_expected_prev[14];
	end
	if (
		( result_expected_prev[15] !== 1'bx ) && ( result_prev[15] !== result_expected_prev[15] )
		&& ((result_expected_prev[15] !== last_result_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[15] = result_expected_prev[15];
	end
	if (
		( result_expected_prev[16] !== 1'bx ) && ( result_prev[16] !== result_expected_prev[16] )
		&& ((result_expected_prev[16] !== last_result_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[16] = result_expected_prev[16];
	end
	if (
		( result_expected_prev[17] !== 1'bx ) && ( result_prev[17] !== result_expected_prev[17] )
		&& ((result_expected_prev[17] !== last_result_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[17] = result_expected_prev[17];
	end
	if (
		( result_expected_prev[18] !== 1'bx ) && ( result_prev[18] !== result_expected_prev[18] )
		&& ((result_expected_prev[18] !== last_result_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[18] = result_expected_prev[18];
	end
	if (
		( result_expected_prev[19] !== 1'bx ) && ( result_prev[19] !== result_expected_prev[19] )
		&& ((result_expected_prev[19] !== last_result_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[19] = result_expected_prev[19];
	end
	if (
		( result_expected_prev[20] !== 1'bx ) && ( result_prev[20] !== result_expected_prev[20] )
		&& ((result_expected_prev[20] !== last_result_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[20] = result_expected_prev[20];
	end
	if (
		( result_expected_prev[21] !== 1'bx ) && ( result_prev[21] !== result_expected_prev[21] )
		&& ((result_expected_prev[21] !== last_result_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[21] = result_expected_prev[21];
	end
	if (
		( result_expected_prev[22] !== 1'bx ) && ( result_prev[22] !== result_expected_prev[22] )
		&& ((result_expected_prev[22] !== last_result_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[22] = result_expected_prev[22];
	end
	if (
		( result_expected_prev[23] !== 1'bx ) && ( result_prev[23] !== result_expected_prev[23] )
		&& ((result_expected_prev[23] !== last_result_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[23] = result_expected_prev[23];
	end
	if (
		( result_expected_prev[24] !== 1'bx ) && ( result_prev[24] !== result_expected_prev[24] )
		&& ((result_expected_prev[24] !== last_result_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[24] = result_expected_prev[24];
	end
	if (
		( result_expected_prev[25] !== 1'bx ) && ( result_prev[25] !== result_expected_prev[25] )
		&& ((result_expected_prev[25] !== last_result_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[25] = result_expected_prev[25];
	end
	if (
		( result_expected_prev[26] !== 1'bx ) && ( result_prev[26] !== result_expected_prev[26] )
		&& ((result_expected_prev[26] !== last_result_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[26] = result_expected_prev[26];
	end
	if (
		( result_expected_prev[27] !== 1'bx ) && ( result_prev[27] !== result_expected_prev[27] )
		&& ((result_expected_prev[27] !== last_result_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[27] = result_expected_prev[27];
	end
	if (
		( result_expected_prev[28] !== 1'bx ) && ( result_prev[28] !== result_expected_prev[28] )
		&& ((result_expected_prev[28] !== last_result_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[28] = result_expected_prev[28];
	end
	if (
		( result_expected_prev[29] !== 1'bx ) && ( result_prev[29] !== result_expected_prev[29] )
		&& ((result_expected_prev[29] !== last_result_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[29] = result_expected_prev[29];
	end
	if (
		( result_expected_prev[30] !== 1'bx ) && ( result_prev[30] !== result_expected_prev[30] )
		&& ((result_expected_prev[30] !== last_result_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[30] = result_expected_prev[30];
	end
	if (
		( result_expected_prev[31] !== 1'bx ) && ( result_prev[31] !== result_expected_prev[31] )
		&& ((result_expected_prev[31] !== last_result_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[31] = result_expected_prev[31];
	end
	if (
		( result_expected_prev[32] !== 1'bx ) && ( result_prev[32] !== result_expected_prev[32] )
		&& ((result_expected_prev[32] !== last_result_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[32] = result_expected_prev[32];
	end
	if (
		( result_expected_prev[33] !== 1'bx ) && ( result_prev[33] !== result_expected_prev[33] )
		&& ((result_expected_prev[33] !== last_result_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[33] = result_expected_prev[33];
	end
	if (
		( result_expected_prev[34] !== 1'bx ) && ( result_prev[34] !== result_expected_prev[34] )
		&& ((result_expected_prev[34] !== last_result_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[34] = result_expected_prev[34];
	end
	if (
		( result_expected_prev[35] !== 1'bx ) && ( result_prev[35] !== result_expected_prev[35] )
		&& ((result_expected_prev[35] !== last_result_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[35] = result_expected_prev[35];
	end
	if (
		( result_expected_prev[36] !== 1'bx ) && ( result_prev[36] !== result_expected_prev[36] )
		&& ((result_expected_prev[36] !== last_result_exp[36]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[36] = result_expected_prev[36];
	end
	if (
		( result_expected_prev[37] !== 1'bx ) && ( result_prev[37] !== result_expected_prev[37] )
		&& ((result_expected_prev[37] !== last_result_exp[37]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[37] = result_expected_prev[37];
	end
	if (
		( result_expected_prev[38] !== 1'bx ) && ( result_prev[38] !== result_expected_prev[38] )
		&& ((result_expected_prev[38] !== last_result_exp[38]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[38] = result_expected_prev[38];
	end
	if (
		( result_expected_prev[39] !== 1'bx ) && ( result_prev[39] !== result_expected_prev[39] )
		&& ((result_expected_prev[39] !== last_result_exp[39]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[39] = result_expected_prev[39];
	end
	if (
		( result_expected_prev[40] !== 1'bx ) && ( result_prev[40] !== result_expected_prev[40] )
		&& ((result_expected_prev[40] !== last_result_exp[40]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[40] = result_expected_prev[40];
	end
	if (
		( result_expected_prev[41] !== 1'bx ) && ( result_prev[41] !== result_expected_prev[41] )
		&& ((result_expected_prev[41] !== last_result_exp[41]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[41] = result_expected_prev[41];
	end
	if (
		( result_expected_prev[42] !== 1'bx ) && ( result_prev[42] !== result_expected_prev[42] )
		&& ((result_expected_prev[42] !== last_result_exp[42]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[42] = result_expected_prev[42];
	end
	if (
		( result_expected_prev[43] !== 1'bx ) && ( result_prev[43] !== result_expected_prev[43] )
		&& ((result_expected_prev[43] !== last_result_exp[43]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[43] = result_expected_prev[43];
	end
	if (
		( result_expected_prev[44] !== 1'bx ) && ( result_prev[44] !== result_expected_prev[44] )
		&& ((result_expected_prev[44] !== last_result_exp[44]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[44] = result_expected_prev[44];
	end
	if (
		( result_expected_prev[45] !== 1'bx ) && ( result_prev[45] !== result_expected_prev[45] )
		&& ((result_expected_prev[45] !== last_result_exp[45]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[45] = result_expected_prev[45];
	end
	if (
		( result_expected_prev[46] !== 1'bx ) && ( result_prev[46] !== result_expected_prev[46] )
		&& ((result_expected_prev[46] !== last_result_exp[46]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[46] = result_expected_prev[46];
	end
	if (
		( result_expected_prev[47] !== 1'bx ) && ( result_prev[47] !== result_expected_prev[47] )
		&& ((result_expected_prev[47] !== last_result_exp[47]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[47] = result_expected_prev[47];
	end
	if (
		( result_expected_prev[48] !== 1'bx ) && ( result_prev[48] !== result_expected_prev[48] )
		&& ((result_expected_prev[48] !== last_result_exp[48]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[48] = result_expected_prev[48];
	end
	if (
		( result_expected_prev[49] !== 1'bx ) && ( result_prev[49] !== result_expected_prev[49] )
		&& ((result_expected_prev[49] !== last_result_exp[49]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[49] = result_expected_prev[49];
	end
	if (
		( result_expected_prev[50] !== 1'bx ) && ( result_prev[50] !== result_expected_prev[50] )
		&& ((result_expected_prev[50] !== last_result_exp[50]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[50] = result_expected_prev[50];
	end
	if (
		( result_expected_prev[51] !== 1'bx ) && ( result_prev[51] !== result_expected_prev[51] )
		&& ((result_expected_prev[51] !== last_result_exp[51]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[51] = result_expected_prev[51];
	end
	if (
		( result_expected_prev[52] !== 1'bx ) && ( result_prev[52] !== result_expected_prev[52] )
		&& ((result_expected_prev[52] !== last_result_exp[52]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[52] = result_expected_prev[52];
	end
	if (
		( result_expected_prev[53] !== 1'bx ) && ( result_prev[53] !== result_expected_prev[53] )
		&& ((result_expected_prev[53] !== last_result_exp[53]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[53] = result_expected_prev[53];
	end
	if (
		( result_expected_prev[54] !== 1'bx ) && ( result_prev[54] !== result_expected_prev[54] )
		&& ((result_expected_prev[54] !== last_result_exp[54]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[54] = result_expected_prev[54];
	end
	if (
		( result_expected_prev[55] !== 1'bx ) && ( result_prev[55] !== result_expected_prev[55] )
		&& ((result_expected_prev[55] !== last_result_exp[55]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[55] = result_expected_prev[55];
	end
	if (
		( result_expected_prev[56] !== 1'bx ) && ( result_prev[56] !== result_expected_prev[56] )
		&& ((result_expected_prev[56] !== last_result_exp[56]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[56] = result_expected_prev[56];
	end
	if (
		( result_expected_prev[57] !== 1'bx ) && ( result_prev[57] !== result_expected_prev[57] )
		&& ((result_expected_prev[57] !== last_result_exp[57]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[57] = result_expected_prev[57];
	end
	if (
		( result_expected_prev[58] !== 1'bx ) && ( result_prev[58] !== result_expected_prev[58] )
		&& ((result_expected_prev[58] !== last_result_exp[58]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[58] = result_expected_prev[58];
	end
	if (
		( result_expected_prev[59] !== 1'bx ) && ( result_prev[59] !== result_expected_prev[59] )
		&& ((result_expected_prev[59] !== last_result_exp[59]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[59] = result_expected_prev[59];
	end
	if (
		( result_expected_prev[60] !== 1'bx ) && ( result_prev[60] !== result_expected_prev[60] )
		&& ((result_expected_prev[60] !== last_result_exp[60]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[60] = result_expected_prev[60];
	end
	if (
		( result_expected_prev[61] !== 1'bx ) && ( result_prev[61] !== result_expected_prev[61] )
		&& ((result_expected_prev[61] !== last_result_exp[61]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[61] = result_expected_prev[61];
	end
	if (
		( result_expected_prev[62] !== 1'bx ) && ( result_prev[62] !== result_expected_prev[62] )
		&& ((result_expected_prev[62] !== last_result_exp[62]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[62] = result_expected_prev[62];
	end
	if (
		( result_expected_prev[63] !== 1'bx ) && ( result_prev[63] !== result_expected_prev[63] )
		&& ((result_expected_prev[63] !== last_result_exp[63]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[63] = result_expected_prev[63];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#500000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module booth_alu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] multiplier;
reg [31:0] mutiplicant;
// wires                                               
wire [63:0] result;

wire sampler;                             

// assign statements (if any)                          
booth_alu i1 (
// port map - connection between master ports and signals/registers   
	.multiplier(multiplier),
	.mutiplicant(mutiplicant),
	.result(result)
);
// multiplier[ 31 ]
initial
begin
	multiplier[31] = 1'b0;
end 
// multiplier[ 30 ]
initial
begin
	multiplier[30] = 1'b0;
end 
// multiplier[ 29 ]
initial
begin
	multiplier[29] = 1'b0;
end 
// multiplier[ 28 ]
initial
begin
	multiplier[28] = 1'b0;
end 
// multiplier[ 27 ]
initial
begin
	multiplier[27] = 1'b0;
end 
// multiplier[ 26 ]
initial
begin
	multiplier[26] = 1'b0;
end 
// multiplier[ 25 ]
initial
begin
	multiplier[25] = 1'b0;
end 
// multiplier[ 24 ]
initial
begin
	multiplier[24] = 1'b0;
end 
// multiplier[ 23 ]
initial
begin
	multiplier[23] = 1'b0;
end 
// multiplier[ 22 ]
initial
begin
	multiplier[22] = 1'b0;
end 
// multiplier[ 21 ]
initial
begin
	multiplier[21] = 1'b0;
end 
// multiplier[ 20 ]
initial
begin
	multiplier[20] = 1'b0;
end 
// multiplier[ 19 ]
initial
begin
	multiplier[19] = 1'b0;
end 
// multiplier[ 18 ]
initial
begin
	multiplier[18] = 1'b0;
end 
// multiplier[ 17 ]
initial
begin
	multiplier[17] = 1'b0;
end 
// multiplier[ 16 ]
initial
begin
	multiplier[16] = 1'b0;
end 
// multiplier[ 15 ]
initial
begin
	multiplier[15] = 1'b0;
end 
// multiplier[ 14 ]
initial
begin
	multiplier[14] = 1'b0;
end 
// multiplier[ 13 ]
initial
begin
	multiplier[13] = 1'b0;
end 
// multiplier[ 12 ]
initial
begin
	multiplier[12] = 1'b0;
end 
// multiplier[ 11 ]
initial
begin
	multiplier[11] = 1'b0;
end 
// multiplier[ 10 ]
initial
begin
	multiplier[10] = 1'b0;
end 
// multiplier[ 9 ]
initial
begin
	multiplier[9] = 1'b0;
end 
// multiplier[ 8 ]
initial
begin
	multiplier[8] = 1'b0;
end 
// multiplier[ 7 ]
initial
begin
	multiplier[7] = 1'b0;
end 
// multiplier[ 6 ]
initial
begin
	multiplier[6] = 1'b0;
end 
// multiplier[ 5 ]
initial
begin
	multiplier[5] = 1'b0;
end 
// multiplier[ 4 ]
initial
begin
	multiplier[4] = 1'b0;
end 
// multiplier[ 3 ]
initial
begin
	multiplier[3] = 1'b0;
end 
// multiplier[ 2 ]
initial
begin
	multiplier[2] = 1'b1;
end 
// multiplier[ 1 ]
initial
begin
	multiplier[1] = 1'b0;
end 
// multiplier[ 0 ]
initial
begin
	multiplier[0] = 1'b0;
end 
// mutiplicant[ 31 ]
initial
begin
	mutiplicant[31] = 1'b0;
end 
// mutiplicant[ 30 ]
initial
begin
	mutiplicant[30] = 1'b0;
end 
// mutiplicant[ 29 ]
initial
begin
	mutiplicant[29] = 1'b0;
end 
// mutiplicant[ 28 ]
initial
begin
	mutiplicant[28] = 1'b0;
end 
// mutiplicant[ 27 ]
initial
begin
	mutiplicant[27] = 1'b0;
end 
// mutiplicant[ 26 ]
initial
begin
	mutiplicant[26] = 1'b0;
end 
// mutiplicant[ 25 ]
initial
begin
	mutiplicant[25] = 1'b0;
end 
// mutiplicant[ 24 ]
initial
begin
	mutiplicant[24] = 1'b0;
end 
// mutiplicant[ 23 ]
initial
begin
	mutiplicant[23] = 1'b0;
end 
// mutiplicant[ 22 ]
initial
begin
	mutiplicant[22] = 1'b0;
end 
// mutiplicant[ 21 ]
initial
begin
	mutiplicant[21] = 1'b0;
end 
// mutiplicant[ 20 ]
initial
begin
	mutiplicant[20] = 1'b0;
end 
// mutiplicant[ 19 ]
initial
begin
	mutiplicant[19] = 1'b0;
end 
// mutiplicant[ 18 ]
initial
begin
	mutiplicant[18] = 1'b0;
end 
// mutiplicant[ 17 ]
initial
begin
	mutiplicant[17] = 1'b0;
end 
// mutiplicant[ 16 ]
initial
begin
	mutiplicant[16] = 1'b0;
end 
// mutiplicant[ 15 ]
initial
begin
	mutiplicant[15] = 1'b0;
end 
// mutiplicant[ 14 ]
initial
begin
	mutiplicant[14] = 1'b0;
end 
// mutiplicant[ 13 ]
initial
begin
	mutiplicant[13] = 1'b0;
end 
// mutiplicant[ 12 ]
initial
begin
	mutiplicant[12] = 1'b0;
end 
// mutiplicant[ 11 ]
initial
begin
	mutiplicant[11] = 1'b0;
end 
// mutiplicant[ 10 ]
initial
begin
	mutiplicant[10] = 1'b0;
end 
// mutiplicant[ 9 ]
initial
begin
	mutiplicant[9] = 1'b0;
end 
// mutiplicant[ 8 ]
initial
begin
	mutiplicant[8] = 1'b0;
end 
// mutiplicant[ 7 ]
initial
begin
	mutiplicant[7] = 1'b0;
end 
// mutiplicant[ 6 ]
initial
begin
	mutiplicant[6] = 1'b0;
end 
// mutiplicant[ 5 ]
initial
begin
	mutiplicant[5] = 1'b0;
end 
// mutiplicant[ 4 ]
initial
begin
	mutiplicant[4] = 1'b0;
end 
// mutiplicant[ 3 ]
initial
begin
	mutiplicant[3] = 1'b1;
end 
// mutiplicant[ 2 ]
initial
begin
	mutiplicant[2] = 1'b1;
end 
// mutiplicant[ 1 ]
initial
begin
	mutiplicant[1] = 1'b0;
end 
// mutiplicant[ 0 ]
initial
begin
	mutiplicant[0] = 1'b0;
end 

booth_alu_vlg_sample_tst tb_sample (
	.multiplier(multiplier),
	.mutiplicant(mutiplicant),
	.sampler_tx(sampler)
);

booth_alu_vlg_check_tst tb_out(
	.result(result),
	.sampler_rx(sampler)
);
endmodule

